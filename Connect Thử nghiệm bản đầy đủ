-----
SinhVien.h
#include"connect.h"

#include <iostream>


using namespace std;

class sv
{
private:
	connects connect;
public:
	sv();
	~sv();
	void Xuat();
	void Nhap();
	void Update();

};
------------
SinhVien.cpp
#include "SinhVien.h"
#include <string>

sv::sv()
{
	this->connect.on();
}

sv::~sv()
{
	this->connect.dis();
}

void sv::Xuat()
{
	const char* a = "SELECT * FROM SINHVIEN";
	this->connect.Xuat(a);
}

void sv::Nhap()
{
	
	string x, msv, hoten, ngaysinh, diachi,sdt;
	getchar();
	cout << "Nhap ma sinh vien : ";
	getline(cin, msv);
	cout << "Nhap ho ten : ";
	getline(cin, hoten);
	cout << "Nhap ngay sinh : ";
	getline(cin, ngaysinh);
	cout << "Nhap dia chi : ";
	getline(cin, diachi);
	cout << "Nhap so dien thoai : ";
	getline(cin, sdt);




	x = "INSERT INTO SINHVIEN VALUES('" + msv + "','" + hoten + "','" + ngaysinh + "','" + diachi + "','" + sdt + "')";
	/*cout << endl;
	cout << x << endl;*/
	this->connect.Nhap(x.c_str());
}

void sv::Update() {
	string msv, newdata;
	cout << "Nhap msv can sua : ";
	getline(cin, msv);
	cout << "Nhap du lieu cua ma sinh vien moi : ";
	getline(cin, newdata);
	string result;
	result = " update SINHVIEN set MSSV = " + newdata + " where MSSV  = " + msv;
	//cout << result << endl;
	this->connect.Nhap(result.c_str());


}
---
connect.h

#pragma once
#include <iostream>
#include <windows.h>
#include <sqlext.h>
#include <sqltypes.h>
#include <sql.h>
#include <iomanip>
using namespace std;
class connects
{
private:
	SQLHANDLE SQLEnvHandle;
	SQLHANDLE SQLConnectionHandle;
	SQLHANDLE SQLStatementHandle;
	SQLRETURN retCode;
public:
	connects();
	~connects();
	void on();
	void dis();
	void Xuat(const char*);
	void Nhap(const char*);
	void Update(const char*);
};


---connect.cpp 
#include "connect.h"


connects::connects() {

	this->SQLEnvHandle = NULL;
	this->SQLConnectionHandle = NULL;
	this->SQLStatementHandle = NULL;
	this->retCode = 0;
}

connects::~connects()
{
}

void connects::on()
{
	do {
		//Important!!
		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &SQLEnvHandle))
			// Allocates the environment	
			break;


		if (SQL_SUCCESS != SQLSetEnvAttr(SQLEnvHandle, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, 0))
			// Sets attributes that govern aspects of environments
			break;

		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_DBC, SQLEnvHandle, &SQLConnectionHandle))
			// Allocates the connection
			break;

		//if (SQL_SUCCESS != SQLSetConnectAttr(SQLConnectionHandle, SQL_LOGIN_TIMEOUT, (SQLPOINTER)5, 0))
			// Sets attributes that govern aspects of connections
			//break;
		//
		SQLCHAR retConString[1024]; // Conection string
		switch (SQLDriverConnect(SQLConnectionHandle, NULL, (SQLCHAR*)"DRIVER={SQL Server}; SERVER=DESKTOP-D9VU28Q\\SQLEXPRESS; DATABASE=QLKTX_Test3;User Id = sa;Password = 27042001;", SQL_NTS, retConString, 1024, NULL, SQL_DRIVER_NOPROMPT)) {
			// Establishes connections to a driver and a data source						 Server=DESKTOP-OVLNOKF;Database=SV;Trusted_Connection=True; MultipleActiveResultSets = True
		case SQL_SUCCESS:
			break;
		case SQL_SUCCESS_WITH_INFO:
			break;
		case SQL_NO_DATA_FOUND:
			//this->showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		case SQL_INVALID_HANDLE:
			//this->showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		case SQL_ERROR:
			//this->showSQLError(SQL_HANDLE_DBC, SQLConnectionHandle);
			retCode = -1;
			break;
		default:
			break;
		}

		if (retCode == -1)
			break;

		if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, SQLConnectionHandle, &SQLStatementHandle))
			// Allocates the statement
			break;

	} while (FALSE);
}

void connects::dis()
{
	SQLFreeHandle(SQL_HANDLE_STMT, SQLStatementHandle);
	SQLDisconnect(SQLConnectionHandle);
	SQLFreeHandle(SQL_HANDLE_DBC, SQLConnectionHandle);
	SQLFreeHandle(SQL_HANDLE_ENV, SQLEnvHandle);
}

void connects::Xuat(const char* sv0)
{
	const char* SQLQuery = sv0;


	if (SQL_SUCCESS != SQLExecDirect(this->SQLStatementHandle, (SQLCHAR*)SQLQuery, SQL_NTS)) {
		// Executes a preparable statement
		//this->showSQLError(SQL_HANDLE_STMT, this->SQLStatementHandle);
	}
	else {
		char mssv[10], hoten[20], ngaysinh[14], diachi[30], sdt[14];


		while (SQLFetch(SQLStatementHandle) == SQL_SUCCESS) {
			// Fetches the next rowset of data from the result
			SQLGetData(SQLStatementHandle, 1, SQL_C_DEFAULT, &mssv, sizeof(mssv), NULL);
			SQLGetData(SQLStatementHandle, 2, SQL_C_DEFAULT, &hoten, sizeof(hoten), NULL);
			SQLGetData(SQLStatementHandle, 3, SQL_C_DEFAULT, &ngaysinh, sizeof(ngaysinh), NULL);
			SQLGetData(SQLStatementHandle, 4, SQL_C_DEFAULT, &diachi, sizeof(diachi), NULL);
			SQLGetData(SQLStatementHandle, 4, SQL_C_DEFAULT, &sdt, sizeof(sdt), NULL);

			// Retrieves data for a single column in the result set
			cout << setw(10) << left << mssv << setw(20) << hoten << setw(15) << ngaysinh << setw(20) << diachi << setw(14) << sdt << endl;










		//char MSV[100];
		//char Ho[100];
		//char Ten[100];
		//char NgaySinh[100];
		//char CMND[100];
		//char Diachi[100];
		//bool gioitinh;


		//while (SQLFetch(this->SQLStatementHandle) == SQL_SUCCESS)
		//{
		//	/*SQLGetData(this->SQLStatementHandle, 1, SQL_C_DEFAULT, &MSV, sizeof(MSV), NULL);
		//	SQLGetData(this->SQLStatementHandle, 2, SQL_C_DEFAULT, &Ho, sizeof(Ho), NULL);
		//	SQLGetData(this->SQLStatementHandle, 3, SQL_C_DEFAULT, &Ten, sizeof(Ten), NULL);
		//	SQLGetData(this->SQLStatementHandle, 4, SQL_C_DEFAULT, &NgaySinh, sizeof(NgaySinh), NULL);
		//	SQLGetData(this->SQLStatementHandle, 5, SQL_C_DEFAULT, &CMND, sizeof(CMND), NULL);
		//	SQLGetData(this->SQLStatementHandle, 6, SQL_C_DEFAULT, &Diachi, sizeof(Diachi), NULL);
		//	SQLGetData(this->SQLStatementHandle, 7, SQL_C_DEFAULT, &gioitinh, sizeof(gioitinh), NULL);
		//	cout << MSV << "__" << Ho << " " << Ten << "__" << NgaySinh << "__" << CMND << "__" << Diachi << "__" << gioitinh << endl;*/
		}
	}
	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, SQLConnectionHandle, &SQLStatementHandle))
		int t = 0;
}

void connects::Nhap(const char* sv0)
{
	const char* SQLQuery = sv0;
	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, SQLConnectionHandle, &SQLStatementHandle))
		int t = 0;


	if (SQL_SUCCESS != SQLExecDirect(SQLStatementHandle, (SQLCHAR*)SQLQuery, SQL_NTS)) {
		// Executes a preparable statement
		//showSQLError(SQL_HANDLE_STMT, SQLStatementHandle);

	}
	else {
		cout << "Them Thanh Cong!" << endl;
	}
}

void connects::Update(const char* sv0)
{
	const char* SQLQuery = sv0;
	if (SQL_SUCCESS != SQLAllocHandle(SQL_HANDLE_STMT, SQLConnectionHandle, &SQLStatementHandle))
		int t = 0;


	if (SQL_SUCCESS != SQLExecDirect(SQLStatementHandle, (SQLCHAR*)SQLQuery, SQL_NTS)) {
		// Executes a preparable statement
		//showSQLError(SQL_HANDLE_STMT, SQLStatementHandle);
		int i = 0;

	}
	else {
		cout << "Update Thanh Cong!" << endl;
	}
}

---
Connectthunghiem.cpp
#include"SinhVien.h"
#include <iostream>
#include<conio.h>
int main()
{
	//sv sv0;
	//cout << "BAN DANG THAO TAC TREN BANG SINH VIEN " << endl;

	//do {
	//	cout << "1.Xuat" << endl;
	//	cout << "2.Nhap" << endl;
	//	cout << "3.Thoat" << endl;
	//	cout << "Nhap lua chon cua ban : ";
	//	//int u = _getch();
	//	int u;
	//	cin >> u;
	//	if (u == 1) {
	//		sv0.Xuat();
	//	}
	//	if (u == 2) {
	//		sv0.Nhap();
	//	}
	//	if (u == 3) {
	//		break;
	//	}
	//	getchar();
	//} while (true);
	
	sv sv0;
	sv0.Xuat();
	sv0.Update();
	sv0.Xuat();

	return 0;


}
